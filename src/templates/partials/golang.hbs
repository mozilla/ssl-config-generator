// {{output.header}}
// {{{output.link}}}
package main

import (
    "crypto/tls"
    "log"
    "net/http"
{{#if form.hsts}}
    "time"
{{/if}}
)

func main() {
    mux := http.NewServeMux()
    mux.HandleFunc("/", func(w http.ResponseWriter, req *http.Request) {
{{#if form.hsts}}
        w.Header().Add("Strict-Transport-Security", "max-age={{output.hstsMaxAge}}")
{{/if}}
        w.Write([]byte("This server is running the Mozilla {{form.config}} configuration.\n"))
    })
{{#if form.hsts}}

    go func() {
        redirectToHTTPS := func(w http.ResponseWriter, req *http.Request) {
            http.Redirect(w, req, "https://"+req.Host+req.RequestURI, http.StatusMovedPermanently)
        }
        srv := &http.Server{
            Handler:     http.HandlerFunc(redirectToHTTPS),
            ReadTimeout: 60 * time.Second, WriteTimeout: 60 * time.Second,
        }
        log.Fatal(srv.ListenAndServe())
    }()
{{/if}}

    cfg := &tls.Config{
        MinVersion: tls.{{#if (eq output.protocols.[0] "TLSv1")}}VersionTLS10{{else}}{{{replace output.protocols.[0] "TLSv1." "VersionTLS1"}}}{{/if}},
{{#if output.serverPreferredOrder}}
        PreferServerCipherSuites: true,
{{/if}}
{{#if output.ciphers.length}}
        CipherSuites: []uint16{
      {{#each output.ciphers}}
            tls.{{this}},
      {{/each}}
        },
{{/if}}
    }

    srv := &http.Server{
        Addr:      ":443",
        Handler:   mux,
        TLSConfig: cfg,
        // Consider setting ReadTimeout, WriteTimeout, and IdleTimeout
        // to prevent connections from taking resources indefinitely.
    }

    log.Fatal(srv.ListenAndServeTLS(
        "/path/to/signed_cert_plus_intermediates",
        "/path/to/private_key",
    ))
}
